# ==============================
# üì° ARBITRAGE SCANNER FOR MEXC
# ==============================
# –ê–≤—Ç–æ—Ä: [–í–∞—à–µ –ò–º—è]
# –í–µ—Ä—Å–∏—è: 1.3
# –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
# ==============================

import asyncio
import aiohttp
import time
import re
import logging
import json
import pytz
from datetime import datetime
from telegram.error import TimedOut
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
# üîß CONFIGURATION
from config import (
    THRESHOLD_PERCENT,
    THRESHOLD_NOTIFY_PERCENT,
    TELEGRAM_GROUP_ID,
    THREAD_ID,
    CHECK_INTERVAL_FAST,
    CHECK_INTERVAL_SLOW,
    PAIRS_UPDATE_INTERVAL,
    API_RATE_LIMIT,
    TOP_VOLUME_LIMIT,
    API_MAX_CONCURRENT_REQUESTS,
    RISK_MULTIPLIER,
)

# üíæ DATABASE & BOT INTEGRATION
from database import save_signal, get_subscribers
from symbols_loader import get_top_symbols

# ‚öôÔ∏è LOGGING SETUP
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("scanner.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ARBITRAGE_SCANNER")
logger.info("üöÄ Starting Arbitrage Scanner Pro")

# üîÑ RATE LIMITING SYSTEM
_last_request_time = 0
_min_interval = 1 / API_RATE_LIMIT if API_RATE_LIMIT > 0 else 0.2
semaphore = asyncio.Semaphore(API_MAX_CONCURRENT_REQUESTS if API_MAX_CONCURRENT_REQUESTS else 5)


# =======================
# üîÑ UTILITY FUNCTIONS
# =======================

async def rate_limit():
    """‚è≥ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    global _last_request_time, _min_interval
    now = time.time()
    elapsed = now - _last_request_time
    if elapsed < _min_interval:
        await asyncio.sleep(_min_interval - elapsed)
    _last_request_time = time.time()


def normalize_symbol(symbol: str, symbol_type: str) -> str:
    """üîÑ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    symbol = symbol.upper()
    if symbol_type == 'spot':
        return symbol.replace("USDT", "").replace("USD", "")
    elif symbol_type == 'futures':
        base = re.sub(
            r"(_PERP|_USD|_USDT|_FUTURE|_THISWEEK|_NEXTWEEK|_QUARTER|_NEXTQUARTER)$",
            "",
            symbol
        )
        return base.replace("_", "")
    return symbol


def get_signal_strength(spread):
    """üí™ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø—Ä–µ–¥–∞"""
    if spread >= 8.0:
        return "üî•üî•üî• –û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô"
    elif spread >= 5.0:
        return "üî•üî• –°–ò–õ–¨–ù–´–ô"
    elif spread >= 3.0:
        return "üî• –°–†–ï–î–ù–ò–ô"
    else:
        return "‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–´–ô"


def get_historical_context(spread):
    """üìú –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ø—Ä–µ–¥–∞"""
    if spread >= 15.0:
        return "üìà –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ú–ê–ö–°–ò–ú–£–ú!"
    elif spread >= 10.0:
        return "üöÄ –ù–ï–ë–´–í–ê–õ–´–ô –°–ü–†–ï–î"
    elif spread >= 5.0:
        return "üíé –í–´–°–û–ö–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨"
    else:
        return "üìä –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø"


def get_risk_management(spread, volume):
    """‚öñÔ∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏"""
    leverage = min(int(spread * RISK_MULTIPLIER), 20)
    position_size = min(volume * 0.0001, 10000)
    return (
        f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {leverage}x\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:,.2f}\n"
        f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {max(1, spread / 2):.2f}% –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞"
    )


def get_liquidity_status(volume):
    """üíß –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    if volume > 5000000:
        return "üíß –í–´–°–û–ö–ê–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨"
    elif volume > 1000000:
        return "üíß –°–†–ï–î–ù–Ø–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨"
    else:
        return "‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –õ–ò–ö–í–ò–î–ù–û–°–¢–¨"


def format_timestamp():
    """‚è± –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    utc_time = datetime.utcnow()
    local_time = utc_time.replace(tzinfo=pytz.utc).astimezone()
    return (
        f"UTC: {utc_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–õ–æ–∫–∞–ª—å–Ω–æ–µ: {local_time.strftime('%Y-%m-%d %H:%M:%S')}"
    )


def format_spot_url(symbol: str) -> str:
    """üîó –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL —Å–ø–æ—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å UTM-–º–µ—Ç–∫–∞–º–∏"""
    return f"https://www.mexc.com/ru-RU/exchange/{symbol}?utm_source=arbitrage_bot"


def format_futures_url(symbol: str) -> str:
    """üîó –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å UTM-–º–µ—Ç–∫–∞–º–∏"""
    return f"https://www.mexc.com/ru-RU/futures/{symbol}?utm_source=arbitrage_bot"


# =======================
# üì° DATA FETCHING
# =======================

async def get_futures_symbols():
    """üìä –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    url = "https://contract.mexc.com/api/v1/contract/detail"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                data = await resp.json()

                if not isinstance(data.get("data"), list):
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤")
                    return []

                symbols = []
                for item in data["data"]:
                    if not isinstance(item, dict):
                        continue
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    symbol = item.get("symbol") or item.get("contractName") or item.get("instrumentId")
                    if symbol:
                        symbols.append(symbol)

                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                return symbols

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}", exc_info=True)
        return []


async def get_top_symbol_pairs(limit=TOP_VOLUME_LIMIT):
    """üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ø —Å–ø–æ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã —Å —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    futures_symbols_raw = await get_futures_symbols()
    if not futures_symbols_raw:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return []

    spot_symbols = [s for s in get_top_symbols(limit=limit * 3) if isinstance(s, str) and "TRUMP" not in s]
    futures_norm_map = {}

    for f_sym in futures_symbols_raw:
        if not isinstance(f_sym, str):
            continue
        norm_futures = normalize_symbol(f_sym, 'futures')
        futures_norm_map[norm_futures] = f_sym

    filtered = []
    for spot_sym in spot_symbols:
        norm_spot = normalize_symbol(spot_sym, 'spot')
        if norm_spot in futures_norm_map:
            filtered.append((spot_sym, futures_norm_map[norm_spot]))
            if len(filtered) >= limit:
                break

    logger.info(f"üî¢ –û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    return filtered


async def fetch_spot_price(session, symbol, retries=3):
    """üíπ –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∏ –æ–±—ä–µ–º —Å–ø–æ—Ç–æ–≤–æ–π –ø–∞—Ä—ã"""
    async with semaphore:
        await rate_limit()
        url = f"https://api.mexc.com/api/v3/ticker/24hr?symbol={symbol}"
        for attempt in range(retries):
            try:
                async with session.get(url, timeout=10) as resp:
                    data = await resp.json()
                    return (
                        float(data.get("lastPrice") or data.get("price") or 0),
                        float(data.get("quoteVolume") or 0)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤–æ–π —Ü–µ–Ω—ã {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}", exc_info=True)
                await asyncio.sleep(1.5 * (attempt + 1))
        return 0, 0


async def fetch_futures_price(session, symbol, retries=3):
    """üìà –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    async with semaphore:
        await rate_limit()
        url = f"https://contract.mexc.com/api/v1/contract/ticker?symbol={symbol}"

        for attempt in range(retries):
            try:
                async with session.get(url, timeout=10) as resp:
                    data = await resp.json()
                    if "data" in data and "lastPrice" in data["data"]:
                        return float(data["data"]["lastPrice"])

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    if data.get("code") == 510:
                        logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                        await asyncio.sleep(1.5 * (attempt + 1))
                    else:
                        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –¥–ª—è {symbol}: {data}", exc_info=True)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Ü–µ–Ω—ã {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}", exc_info=True)
                await asyncio.sleep(1.5 * (attempt + 1))

        logger.error(f"üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {symbol}")
        return 0


async def fetch_data_for_pair(session, spot_symbol, futures_symbol):
    """üîç –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø—Ä–µ–¥"""
    try:
        spot_price, volume = await fetch_spot_price(session, spot_symbol)
        futures_price = await fetch_futures_price(session, futures_symbol)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if spot_price <= 0 or futures_price <= 0:
            return None

        spread_percent = abs((futures_price - spot_price) / spot_price) * 100

        return {
            "spot_symbol": spot_symbol,
            "futures_symbol": futures_symbol,
            "spot_price": spot_price,
            "futures_price": futures_price,
            "spread_percent": spread_percent,
            "volume_spot": volume,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime()),
            "bid_ask": (
                "Buy Spot / Sell Futures"
                if futures_price > spot_price
                else "Buy Futures / Sell Spot"
            )
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {spot_symbol}/{futures_symbol}: {e}", exc_info=True)
        return None


# =======================
# üíé –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–ò–ì–ù–ê–õ–´
# =======================

def create_signal_message(signal: dict) -> str:
    """üíé –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    spread = signal['spread_percent']
    direction = "üîº –§—å—é—á–µ—Ä—Å –≤—ã—à–µ" if signal['futures_price'] > signal['spot_price'] else "üîΩ –§—å—é—á–µ—Ä—Å –Ω–∏–∂–µ"

    # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    strength = get_signal_strength(spread)
    context = get_historical_context(spread)
    risk = get_risk_management(spread, signal['volume_spot'])
    liquidity = get_liquidity_status(signal['volume_spot'])

    # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–µ–¥–∞
    spread_emoji = "üî•" * min(int(spread), 5) + "üíé" * (1 if spread > 5 else 0)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    spot_price_fmt = f"{signal['spot_price']:.8f}".rstrip('0').rstrip('.')
    futures_price_fmt = f"{signal['futures_price']:.8f}".rstrip('0').rstrip('.')
    volume_fmt = f"${signal['volume_spot']:,.2f}"

    message = (
        "‚ú® *–ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –°–ò–ì–ù–ê–õ* ‚ú®\n\n"

        f"  üìå *{signal['spot_symbol']} / {signal['futures_symbol']}*\n"
        f"  {direction} –Ω–∞ *{spread:.4f}%* {spread_emoji}\n"
        "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        f"‚îÇ  üí™ *–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:* {strength}\n"
        f"‚îÇ  üï∞ *–ö–æ–Ω—Ç–µ–∫—Å—Ç:* {context}\n"
        f"‚îÇ  üíß *–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:* {liquidity}\n"
        f"‚îÇ  üíµ *–°–ø–æ—Ç:* `{spot_price_fmt}`\n"
        f"‚îÇ  üìà *–§—å—é—á–µ—Ä—Å:* `{futures_price_fmt}`\n"
        f"‚îÇ  üí∞ *–û–±—ä–µ–º (24—á):* `{volume_fmt}`\n"
        f"‚îÇ  ‚è± *–í—Ä–µ–º—è:*\n`{format_timestamp()}`\n"
        "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        f"‚îÇ  ‚öñÔ∏è *–°—Ç—Ä–∞—Ç–µ–≥–∏—è:* {signal['bid_ask']}\n"
        f"‚îÇ  ‚ö†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:*\n{risk}\n"
        "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        f"_–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ~{spread * 0.8:.2f}% –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π_"
    )

    return message


# =======================
# üì® NOTIFICATION SYSTEM
# =======================

async def notify_subscribers(signal: dict, send_message_func):
    """‚úâÔ∏è –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å—Ç–∏–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    subscribers = get_subscribers()
    if not subscribers:
        logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    logger.info(f"üë• –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal['spot_symbol']} –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    sem_notify = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É

    message_text = create_signal_message(signal)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üìä –°–ø–æ—Ç", url=format_spot_url(signal['spot_symbol'])),
            InlineKeyboardButton("üìà –§—å—é—á–µ—Ä—Å", url=format_futures_url(signal['futures_symbol']))
        ],
        [
            InlineKeyboardButton("üìâ TradingView",
                                 url=f"https://www.tradingview.com/chart/?symbol=MEXC:{signal['spot_symbol']}"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    async def send_message(user_id):
        async with sem_notify:
            try:
                if send_message_func:
                    await send_message_func(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True,
                        reply_markup=reply_markup
                    )
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.error("–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")
            except TimedOut:
                logger.warning(f"‚è≥ Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await asyncio.sleep(3)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await asyncio.gather(*(send_message(uid) for uid in subscribers))


# =======================
# üîÑ PROCESSING CORE
# =======================

async def process_and_notify(session, pairs, send_message_func=None):
    """üì° –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç"""
    for spot_sym, fut_sym in pairs:
        signal = await fetch_data_for_pair(session, spot_sym, fut_sym)
        if not signal:
            continue

        spread = signal["spread_percent"]
        if spread >= THRESHOLD_PERCENT:
            save_signal(signal)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if spread >= THRESHOLD_NOTIFY_PERCENT:
                await notify_subscribers(signal, send_message_func)

            logger.info(f"üì¢ –°–∏–≥–Ω–∞–ª {spot_sym}/{fut_sym}: –°–ø—Ä–µ–¥ {spread:.4f}%")
        else:
            logger.debug(f"‚è≥ –°–ø—Ä–µ–¥ {spread:.4f}% –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è {spot_sym}/{fut_sym}")


# =======================
# üîÑ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# =======================

async def main_loop(send_message_func=None):
    """üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    last_pairs_update = 0
    pairs = []

    async with aiohttp.ClientSession() as session:
        while True:
            now = time.time()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å —Ç–æ–ø–æ–≤—ã–º –æ–±—ä–µ–º–æ–º
            if now - last_pairs_update > PAIRS_UPDATE_INTERVAL or not pairs:
                logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                pairs = await get_top_symbol_pairs(limit=TOP_VOLUME_LIMIT)
                last_pairs_update = now
                logger.debug(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs}")

            # –î–µ–ª–∏–º –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            fast_pairs = pairs[:50]
            slow_pairs = pairs[50:]

            if fast_pairs:
                try:
                    logger.info(f"‚ö° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(fast_pairs)} –±—ã—Å—Ç—Ä—ã—Ö –ø–∞—Ä")
                    await process_and_notify(session, fast_pairs, send_message_func)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –ø–∞—Ä: {e}", exc_info=True)

                await asyncio.sleep(CHECK_INTERVAL_FAST)

            if slow_pairs:
                try:
                    logger.info(f"üê¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(slow_pairs)} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä")
                    await process_and_notify(session, slow_pairs, send_message_func)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {e}", exc_info=True)

                await asyncio.sleep(CHECK_INTERVAL_SLOW)


# =======================
# üé¨ –°–¢–ê–†–¢
# =======================

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            import pytz
        except ImportError:
            logger.warning("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pytz –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏...")
            import subprocess

            subprocess.run(["pip", "install", "pytz"])
            import pytz

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        asyncio.run(main_loop())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)