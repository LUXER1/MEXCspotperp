#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ========================================================
# ü§ñ ARBITRAGE NOTIFICATION BOT FOR MEXC EXCHANGE
# ========================================================

import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import TELEGRAM_TOKEN, TELEGRAM_GROUP_ID
from database import add_subscriber, remove_subscriber, get_subscribers

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("ARBITRAGE_BOT")
logger.info("ü§ñ Starting Arbitrage Notification Bot")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
THRESHOLD_NOTIFY_PERCENT = 0.7
MAIN_MENU = "main_menu"
SETTINGS_MENU = "settings_menu"
user_settings = {}


def create_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="stats")],
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
            InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe"),
        ],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ])


def create_settings_menu():
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìè –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–µ–¥", callback_data="set_spread"),
            InlineKeyboardButton("üíµ –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–º", callback_data="set_volume"),
        ],
        [
            InlineKeyboardButton("üîó –í–∫–ª/–í—ã–∫–ª —Å—Å—ã–ª–∫–∏", callback_data="toggle_links"),
            InlineKeyboardButton("üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])


async def start_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –Ø - *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ë–æ—Ç –¥–ª—è MEXC*\n"
        "üìä –ú–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–≤—ã–º –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º —Ä—ã–Ω–∫–∞–º–∏.\n\n"
        "üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ –∫—Ä—É–ø–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!"
    )
    await update.message.reply_text(
        welcome_message,
        parse_mode="Markdown",
        reply_markup=create_main_menu()
    )
    context.user_data["menu"] = MAIN_MENU
    logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} - {user.full_name}")


async def get_help_text():
    """–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help."""
    return (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "üîπ –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–≤—ã–º –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º —Ä—ã–Ω–∫–∞–º–∏ –Ω–∞ –±–∏—Ä–∂–µ MEXC.\n\n"
        "üî∏ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚ñ´Ô∏è /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üî∏ *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:*\n"
        "- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫\n\n"
        "‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )


async def check_bot_status(context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ."""
    try:
        chat_member = await context.bot.get_chat_member(
            chat_id=TELEGRAM_GROUP_ID,
            user_id=context.bot.id
        )
        if chat_member.status in ["administrator", "member"]:
            return "üü¢ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:* –ê–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return "üü° *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:* –ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –≥—Ä—É–ø–ø–µ"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
        return "üî¥ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:* –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"


async def get_signal_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã."""
    try:
        conn = sqlite3.connect("arbitrage.db")
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM arbitrage_signals")
        total_signals = c.fetchone()[0]

        c.execute("SELECT AVG(spread_percent) FROM arbitrage_signals")
        avg_spread = c.fetchone()[0] or 0

        c.execute("""
            SELECT symbol, spread_percent, timestamp 
            FROM arbitrage_signals 
            ORDER BY id DESC 
            LIMIT 5
        """)
        last_signals = c.fetchall()

        c.execute("""
            SELECT symbol, MAX(spread_percent), timestamp 
            FROM arbitrage_signals
        """)
        best_signal = c.fetchone()

        conn.close()

        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*\n\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: `{total_signals:,}`\n"
        message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: `{avg_spread:.4f}%`\n\n"

        if best_signal and best_signal[0]:
            message += (
                f"üèÜ *–õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª:*\n"
                f"‚ñ´Ô∏è –ü–∞—Ä–∞: `{best_signal[0]}`\n"
                f"‚ñ´Ô∏è –°–ø—Ä–µ–¥: `{best_signal[1]:.4f}%`\n"
                f"‚ñ´Ô∏è –í—Ä–µ–º—è: `{best_signal[2]}`\n\n"
            )

        if last_signals:
            message += "‚è± *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
            for sym, sp, ts in last_signals:
                message += f"- `{sym}`: {sp:.4f}% ({ts.split()[1]})\n"

        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def get_settings_text(settings):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    return (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: `{settings.get('min_spread', THRESHOLD_NOTIFY_PERCENT) * 100:.2f}%`\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: `{settings.get('min_volume', 0)}`\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∏: `{'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('links_enabled', True) else '–í—ã–∫–ª—é—á–µ–Ω—ã'}`\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: `{'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications', False) else '–í—ã–∫–ª—é—á–µ–Ω—ã'}`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )


async def show_settings_menu(query, settings):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    text = await get_settings_text(settings)
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=create_settings_menu()
    )


async def handle_menu_interaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = update.callback_query
    user = query.from_user
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = user_settings.setdefault(user.id, {
        "min_spread": THRESHOLD_NOTIFY_PERCENT,
        "min_volume": 0,
        "links_enabled": True,
        "notifications": user.id in get_subscribers(),
    })

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
    if query.data == "status":
        status = await check_bot_status(context)
        await query.edit_message_text(
            status,
            parse_mode="Markdown",
            reply_markup=create_main_menu()
        )
        context.user_data["menu"] = MAIN_MENU

    elif query.data == "stats":
        stats = await get_signal_stats()
        await query.edit_message_text(
            stats,
            parse_mode="Markdown",
            reply_markup=create_main_menu()
        )
        context.user_data["menu"] = MAIN_MENU

    elif query.data == "subscribe":
        if add_subscriber(user.id):
            settings["notifications"] = True
            response = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
        else:
            response = "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        await query.edit_message_text(response, reply_markup=create_main_menu())

    elif query.data == "unsubscribe":
        if remove_subscriber(user.id):
            settings["notifications"] = False
            response = "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        else:
            response = "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
        await query.edit_message_text(response, reply_markup=create_main_menu())

    elif query.data == "settings":
        await show_settings_menu(query, settings)
        context.user_data["menu"] = SETTINGS_MENU

    elif query.data == "help":
        help_text = await get_help_text()
        await query.edit_message_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=create_main_menu()
        )

    elif query.data == "back_to_main":
        await query.edit_message_text(
            "üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*",
            parse_mode="Markdown",
            reply_markup=create_main_menu()
        )
        context.user_data["menu"] = MAIN_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif context.user_data.get("menu") == SETTINGS_MENU:
        if query.data == "toggle_links":
            settings["links_enabled"] = not settings["links_enabled"]
            await show_settings_menu(query, settings)

        elif query.data == "toggle_notifications":
            if settings["notifications"]:
                if remove_subscriber(user.id):
                    settings["notifications"] = False
                    response = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
                else:
                    response = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
            else:
                if add_subscriber(user.id):
                    settings["notifications"] = True
                    response = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã."
                else:
                    response = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            await query.edit_message_text(
                response + "\n\n" + await get_settings_text(settings),
                parse_mode="Markdown",
                reply_markup=create_settings_menu()
            )

        elif query.data == "set_spread":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.7):"
            )
            context.user_data["awaiting_spread"] = True

        elif query.data == "set_volume":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:"
            )
            context.user_data["awaiting_volume"] = True

    else:
        await query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", show_alert=True)


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    user = update.effective_user
    text = update.message.text.strip()
    settings = user_settings.setdefault(user.id, {
        "min_spread": THRESHOLD_NOTIFY_PERCENT,
        "min_volume": 0,
        "links_enabled": True,
        "notifications": user.id in get_subscribers(),
    })

    if context.user_data.get("awaiting_spread"):
        try:
            val = float(text.replace(",", "."))
            if val <= 0:
                raise ValueError("–°–ø—Ä–µ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            settings["min_spread"] = val / 100
            await update.message.reply_text(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val:.2f}%"
            )
            context.user_data["awaiting_spread"] = False
            await update.message.reply_text(
                await get_settings_text(settings),
                parse_mode="Markdown",
                reply_markup=create_settings_menu()
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.7"
            )

    elif context.user_data.get("awaiting_volume"):
        try:
            val = float(text.replace(",", "."))
            if val < 0:
                raise ValueError("–û–±—ä–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            settings["min_volume"] = val
            await update.message.reply_text(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}"
            )
            context.user_data["awaiting_volume"] = False
            await update.message.reply_text(
                await get_settings_text(settings),
                parse_mode="Markdown",
                reply_markup=create_settings_menu()
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )

    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
            "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /help"
        )


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = await get_help_text()
    await update.message.reply_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=create_main_menu()
    )


def create_application(token):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    application = Application.builder().token(token).build()



    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_bot))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_menu_interaction))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    return application

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_bot))
        application.add_handler(CommandHandler("help", help_command))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CallbackQueryHandler(handle_menu_interaction))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
        application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

        logger.info("üöÄ Bot started polling...")
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
        raise


if __name__ == "__main__":
    main()