import sqlite3
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)
from config import TELEGRAM_TOKEN, TELEGRAM_GROUP_ID, THREAD_ID
from database import (
    add_subscriber, remove_subscriber, get_subscribers,
    get_user_settings, update_user_settings
)

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
SET_SPREAD, SET_VOLUME = range(2)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è MEXC\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–º –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–≤—ã–º –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º —Ä—ã–Ω–∫–∞–º–∏ –Ω–∞ –±–∏—Ä–∂–µ MEXC.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö."
    )

# /status
async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bot_id = context.bot.id
        chat_member = await context.bot.get_chat_member(
            chat_id=TELEGRAM_GROUP_ID,
            user_id=bot_id
        )
        status = chat_member.status
        await update.message.reply_text(f"‚úÖ –ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ: {status}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ë–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø–ø–µ!")

# /stats
async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = sqlite3.connect("arbitrage.db")
        c = conn.cursor()

        c.execute("SELECT COUNT(*) FROM arbitrage_signals")
        total_signals = c.fetchone()[0]

        c.execute("SELECT symbol, spread_percent, timestamp FROM arbitrage_signals ORDER BY id DESC LIMIT 5")
        last_signals = c.fetchall()

        c.execute("SELECT symbol, MAX(spread_percent) FROM arbitrage_signals")
        best_signal = c.fetchone()

        conn.close()

        message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
        message += f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n"
        if best_signal and best_signal[0] is not None:
            message += f"–õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª: {best_signal[0]} ({best_signal[1]:.4f}%)\n\n"
        else:
            message += "–õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"

        message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
        for symbol, spread, timestamp in last_signals:
            message += f"- {symbol}: {spread:.4f}% ({timestamp})\n"

        await update.message.reply_text(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    added = add_subscriber(user_id)
    if added:
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö.")
    else:
        await update.message.reply_text("üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# /unsubscribe
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    remove_subscriber(user_id)
    await update.message.reply_text("üö´ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# /thread
async def get_thread_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìå –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
        f"ID –≥—Ä—É–ø–ø—ã: `{TELEGRAM_GROUP_ID}`\n"
        f"ID –≤–µ—Ç–∫–∏: `{THREAD_ID}`",
        parse_mode="Markdown"
    )

# /settings
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    settings = get_user_settings(user_id)
    min_spread = settings.get("min_spread", 1.0)
    min_volume = settings.get("min_volume", 100000)

    keyboard = [
        [InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø—Ä–µ–¥", callback_data="set_spread")],
        [InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–º", callback_data="set_volume")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
    ]

    message = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {min_spread:.2f}%\n"
        f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: {min_volume:,.0f} USDT"
    )

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    return ConversationHandler.END

# –ó–∞–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥–∞
async def ask_spread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):")
    return SET_SPREAD

async def set_spread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        value = float(update.message.text.replace(",", "."))
        update_user_settings(update.effective_user.id, "min_spread", value)
        await update.message.reply_text(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {value:.2f}%")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.5:")
        return SET_SPREAD
    return await show_settings(update, context)

# –ó–∞–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞
async def ask_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000):")
    return SET_VOLUME

async def set_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        value = float(update.message.text.replace(",", ""))
        update_user_settings(update.effective_user.id, "min_volume", value)
        await update.message.reply_text(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω: {value:,.0f} USDT")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000:")
        return SET_VOLUME
    return await show_settings(update, context)

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùé –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application = Application.builder().token(TELEGRAM_TOKEN).build()

settings_conv = ConversationHandler(
    entry_points=[CommandHandler("settings", show_settings)],
    states={
        SET_SPREAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_spread)],
        SET_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_volume)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(CommandHandler("status", check_status))
application.add_handler(CommandHandler("stats", get_stats))
application.add_handler(CommandHandler("subscribe", subscribe))
application.add_handler(CommandHandler("unsubscribe", unsubscribe))
application.add_handler(CommandHandler("thread", get_thread_info))
application.add_handler(settings_conv)
application.add_handler(CallbackQueryHandler(ask_spread, pattern="^set_spread$"))
application.add_handler(CallbackQueryHandler(ask_volume, pattern="^set_volume$"))
application.add_handler(CallbackQueryHandler(show_settings, pattern="^cancel$"))
