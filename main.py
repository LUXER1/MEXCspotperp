#!/usr/bin/env python3
import asyncio
import sys
import logging
import signal
from contextlib import AsyncExitStack
from bot import Application, create_application  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from database import init_db, apply_migrations, cleanup_old_data, optimize_db
from scanner import main_loop
from config import DEBUG, TELEGRAM_TOKEN

logging.basicConfig(
    level=logging.DEBUG if DEBUG else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("arbitrage_bot.log")
    ]
)
logger = logging.getLogger(__name__)


async def send_message_wrapper(bot, chat_id, text):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    await bot.send_message(chat_id=chat_id, text=text)


async def start_monitoring(application):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    await main_loop(
        send_message_func=lambda *args: send_message_wrapper(application.bot, *args)
    )


async def shutdown_handler(signal_name, tasks, application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for task in tasks:
        if task and not task.done():
            task.cancel()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if application:
        await application.stop()


async def main():
    application = None
    tasks = []

    async with AsyncExitStack() as stack:
        try:
            logger.info("üõ¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await asyncio.to_thread(init_db)
            await asyncio.to_thread(apply_migrations)
            await asyncio.to_thread(cleanup_old_data)
            await asyncio.to_thread(optimize_db)

            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            application = await create_application("8070188488:AAGuc77t-x5s7YEsAY7ZejnuFO4HxU0kVcE")  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω  # <- –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
            await application.initialize()
            await application.start()

            logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
            monitoring_task = asyncio.create_task(start_monitoring(application))
            polling_task = asyncio.create_task(application.updater.start_polling())

            tasks = [monitoring_task, polling_task]

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            loop = asyncio.get_running_loop()
            for sig in (signal.SIGINT, signal.SIGTERM):
                loop.add_signal_handler(
                    sig,
                    lambda: asyncio.create_task(
                        shutdown_handler(sig.name, tasks, application)
                    )
                )

            await asyncio.gather(*tasks)

        except asyncio.CancelledError:
            logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            logger.info("üëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            if application:
                await application.stop()


def handle_sync_exceptions():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", exc_info=True)
    sys.exit(1)


if __name__ == "__main__":
    sys.excepthook = lambda *args: handle_sync_exceptions()

    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)